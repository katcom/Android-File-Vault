package com.katcom.androidFileVault;

import android.content.Intent;
import android.net.Uri;

import androidx.annotation.Nullable;

import javax.crypto.CipherInputStream;
import javax.crypto.CipherOutputStream;
import javax.crypto.SecretKey;
import java.io.InputStream;
import java.net.URI;

public abstract class Crypto {
    final String keyName = "myKey"; // AKA alias;
    // because using Android keystore, we don't have access to the key itself, so we need an alias

    /**
     * This method returns an InputStream pointed to the files that user copies to vault
     * @return
     */
    InputStream importFile(InputStream in){
        CipherOutputStream out = encrypt()
        while(in.read() != -1){
            int data= in.read();
            out.write(data);

        };
    }

    /**
     *
     * @param in
     * @return
     */
    CipherOutputStream getEncryptedFileOutStream(String targetPath, String key, byte[] iv){

    }




    /**
     * When user clicks import button, call this method
     */
    void importAndEncrypt(Uri uri){
        // get the selected file and encrypt it
        InputStream in = getInputStreamFromUri(uri);
        String filename = getFilenameFromUri(uri);
        String targetPath = "/Vault/" + filename;

        // Above we get the data in the file,
        // Encrypt the data here
        byte[] iv = filename.getBytes();
        CipherOutputStream out = getEncryptedFileOutStream(targetPath, key,iv);

        // write encrypted data
        writeData(in,out);

    }

    void generateSecretKey(){
        // Use the alias to generate a key
        // Use keystore;
    }




    @Override
    protected void onActivityResult(final int requestCode, final int resultCode, @Nullable final Intent data) {

                int count = data.getClipData().getItemCount();

                for (int i = 0; i < count; i++) {
                    Uri SelectedFile = data.getClipData().getItemAt(i).getUri();
                    importFile(uri);
                }

    }

}
